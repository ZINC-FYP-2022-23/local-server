# See grader/common/src/main/resources/config.example.properties

# For each path-pair:
# - graderHostRoot refers to the path as visible by the host running the Grader application.
# - envHostRoot refers to the path as visible by the host running the Docker (or environment virtualization) engine.
#
# This distinction is required in almost all configurations, as these paths act as the bridge to pass information
# between the Docker containers and the Grader itself.
#
# Note that graderHostRoot, envHostRoot, and the path used in Grader runner containers refer to different paths. The
# path used in Grader runner containers are agnostic to the external environment, i.e. they are always mounted at fixed
# locations regardless of the profile.

# The input which store the input files
#
# If you're running grader in a Docker compose server:
#  - Suppose the "volumes" property of the "grader" service in your Docker compose server is set to "/var/zinc/shared:/grader/fsdata", where:
#    - "/var/zinc/shared" is the path on the host machine running the Docker compose server
#    - "/grader/fsdata" is the path in the Docker container running the Grader application
#  - You should fill in the below fields as follows:
#    - context.inPaths.graderHostRoot=/grader/fsdata
#    - context.inPaths.envHostRoot=/var/zinc/shared
context.inPaths.graderHostRoot=/grader/fsdata
context.inPaths.envHostRoot=${PARENT_DIR}/grader-daemon/shared

# The paths which store the output files, i.e. the serialized reports and logs.
context.outPathsRoots.graderHostRoot=/grader/out
context.outPathsRoots.envHostRoot=${PARENT_DIR}/grader-daemon/out

# The paths which store the temporary files used when executing runner containers.
context.logPaths.graderHostRoot=/grader/log
context.logPaths.envHostRoot=${PARENT_DIR}/grader-daemon/log

# The paths to each type of input file, relative to context.inPaths.
#
# The '{}' in each field represents the ID. Specifically:
# - For 'submission', '{}' represents the submission ID.
# - For other fields, '{}' represents the assignment config ID.
context.submission.src=extracted/{}
context.submission.dst=extracted
context.template.src=helpers/{}/template
context.template.dst=template
context.skeleton.src=helpers/{}/skeleton
context.skeleton.dst=skeleton
context.provided.src=helpers/{}/provided
context.provided.dst=provided
context.generated.src=generated/{}
context.generated.dst=generated
context.srcName=src

# Emit score report
report.emitScoreReport=true

# Database related fields
database.url=jdbc:postgresql://postgres:5432/zinc
database.driver=org.postgresql.Driver
database.username=postgres
database.password=admin


# Redis related fields
redis.host=redis
redis.port=6379


# Main daemons refer to Docker engines which are hosted on machines which also provide other services. In general, the
# dispatcher should reserve more resources to the host system to allow other services to keep functioning properly.
docker.daemon.main=unix:///var/run/docker.sock

# host_reservation keys refer to how much CPU time and memory to reserve for the host system to operate.
# cpu refers to the CPU time, in terms of the number of cores. E.g. 1 -> 100% CPU time on a single core
# mem refers to the memory in megabytes (MB).
docker.host_reservation.main.cpu=2
docker.host_reservation.main.mem=2048

# Aux daemons refer to Docker engines which are hosted on machines which only provides the Docker engine. In general,
# the dispatcher should reserve just enough resources to the host system to allow more resources for the Docker engine.
docker.daemon.aux=
docker.host_reservation.aux.cpu=1
docker.host_reservation.aux.mem=2048

# Resource over-commit allows the dispatcher to reserve more resources than the host system provides.
#
# It is generally safe to over-commit CPU time, at the expense of making significantly more context switches and slowing
# the system down.
#
# All values here are expressed as ratios, meaning that the specified resource can be over-committed by a factor of the
# specified value.
docker.overcommit.cpu=2
docker.overcommit.mem=1.5

